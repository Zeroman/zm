#!/usr/bin/ash


sfs_part=""
aufs_part=""
home_part=""
work_part=""
backup_part=""

label_suffix=""

root_sfs=""
home_sfs=""
sfs_in_mem=false
zm_debug=false
sfs_show=false
aufs_show=true
root_mem_size=""
home_mem_size=""

zm_user=""
zm_arch="amd64"

root_file=""
home_file=""
aufs_root_file=""
aufs_home_file=""

#mount path
sfs_part_mpath=/media/sfsroot
sfs_mpath=/media/sfs
aufs_mpath=/media/aufs
sfs_ram_mpath=$sfs_mpath/ram
sfs_root_mpath=$sfs_mpath/root
sfs_home_mpath=$sfs_mpath/home
aufs_root_mpath=$aufs_mpath/aufs_root
aufs_home_mpath=$aufs_mpath/aufs_home
aufs_clean_file_name=.aufs.clean
root_path=/new_root
root_mpath=/
home_mpath=/home
work_mpath=/work
backup_mpath=/media/backup


aufs_file_suffix="tar.gz"
aufs_max_branch=8
cpu_counts=$(cat /proc/cpuinfo | grep "processor" | wc -l)

GZ=gzip
LZ=lzip
XZ=xz
which pigz > /dev/null 2>&1 && GZ="pigz -p $cpu_counts"
which plzip > /dev/null 2>&1 && LZ="plzip -n $cpu_counts"
which pxz > /dev/null 2>&1 && XZ="pxz -T$cpu_counts"

debug_var()
{
    var=$1
    eval value='$'$var
    printf "  %-15s : %-s\n" $var $value
}

print_param_info()
{
    debug_var sfs_part
    debug_var aufs_part
    debug_var home_part
    debug_var work_part
    debug_var backup_part
    debug_var sfs_in_mem
    debug_var root_mem_size
    debug_var home_mem_size
    debug_var root_sfs
    debug_var home_sfs
}

err_exit()
{
    echo "ERROR: $@"
    print_param_info
    launch_interactive_shell
}

get_fileSizeMB()
{
    test -e "$1" || err_exit "$1 is no exist!"
    fileSizeB=`stat -c %s $1`
    fileSizeKB=`expr $fileSizeB / 1024`
    fileSizeMB=`expr $fileSizeKB / 1024`
    echo $fileSizeMB
}

getFree_mem_sizeMB()
{
    free -m | grep Mem | awk '{print $4}'
}

decompress_file()
{
    src_file=$1
    dst_dir=$2
    file_suffix=${src_file#*.}

    res_mem_size=`getFree_mem_sizeMB`
    res_mem_size=`expr $res_mem_size / 8`
    fileSizeMB=`get_fileSizeMB $src_file`
    if [ $res_mem_size -gt $fileSizeMB ];then
        rsync -rhP $src_file /tmp > /dev/console
        src_file=/tmp/$(basename $src_file)
    fi

    case "$file_suffix" in
        tar.gz)
            $GZ -cd $src_file | tar xv -C $dst_dir
            ;;
        tar.lz)
            $LZ -cd $src_file | tar xv -C $dst_dir
            ;;
        tar.xz)
            $XZ -cd $src_file | tar xv -C $dst_dir
            ;;
        tar.7z)
            $7Z x -o${dst_dir} $src_file 
            ;;
        tar)
            tar xvf $src_file -C $dst_dir
            ;;
        *)
            ;;
    esac

    if [ $res_mem_size -gt $fileSizeMB ];then
        rm /tmp/$src_file
    fi
}

mount_partition()
{
    partiton=$1
    mount_point=$2
    if [ -b "$partiton" ];then
        mkdir -p $mount_point
        fsck_device $partiton $mount_point
        mount $partiton $mount_point
    fi
}

init_params()
{
    for x in $(cat /proc/cmdline); do
        case $x in
            sfs_part=*)
                sfs_part=${x#sfs_part=}
                ;;
            aufs_part=*)
                aufs_part=${x#aufs_part=}
                ;;
            label_suffix=*)
                label_suffix=${x#label_suffix=}
                ;;
            root_mem_size=*)
                root_mem_size=${x#root_mem_size=}
                ;;
            home_mem_size=*)
                home_mem_size=${x#home_mem_size=}
                ;;
            zm_user=*)
                zm_user=${x#zm_user=}
                ;;
            zm_arch=*)
                zm_arch=${x#zm_arch=}
                ;;
            root_sfs=*)
                root_sfs=${x#root_sfs=}
                ;;
            home_sfs=*)
                home_sfs=${x#home_sfs=}
                ;;
            home_part=*)
                home_part=${x#home_part=}
                ;;
            work_part=*)
                work_part=${x#work_part=}
                ;;
            backup_part=*)
                backup_part=${x#backup_part=}
                ;;
            sfs_in_mem)
                sfs_in_mem=true
                ;;
            zm_debug)
                zm_debug=true
                set -x
                ;;
        esac
    done

    case $sfs_part in 
        cdrom|/dev/sr*)
            if [ $sfs_part = "cdrom" ];then
                sfs_part=/dev/sr0
            fi
            ;;
        *)
            ;;
    esac

    if [ -z "$root_sfs" ];then
        root_sfs=$(readlink -m "linux/$zm_arch/$zm_user/root.sfs")
    fi
    if [ -z "$home_sfs" ];then
        home_sfs=$(readlink -m "linux/$zm_arch/$zm_user/home.sfs")
    fi
}

wait_sfspart()
{
    wait_time=$1
    test -z "$wait_time" && wait_time=5
    for i in `seq 1 $wait_time`;do
        if [ -b "$sfs_part" ];then
            return 0
        fi
        sleep 1
    done
    return 1
}

init_sfs()
{
    modprobe isofs 
    modprobe ext2 
    modprobe ext3 
    modprobe ext4 
    modprobe squashfs
    # modprobe vfat 
    # modprobe ntfs

    test -n "$sfs_part" && sfs_part=$(resolve_device $sfs_part)
    test -n "$aufs_part" && aufs_part=$(resolve_device $aufs_part)
    test -n "$home_part" && home_part=$(resolve_device $home_part)
    test -n "$work_part" && work_part=$(resolve_device $work_part)
    test -n "$backup_part" && backup_part=$(resolve_device $backup_part)

    test -n "$sfs_part" || sfs_part="/dev/disk/by-label/sfsroot$label_suffix"
    test -n "$aufs_part" || aufs_part="/dev/disk/by-label/aufs$label_suffix"
    test -n "$home_part" || home_part="/dev/disk/by-label/home$label_suffix"
    test -n "$work_part" || work_part="/dev/disk/by-label/work$label_suffix"
    test -n "$backup_part" || backup_part="/dev/disk/by-label/backup$label_suffix"

    if ! wait_sfspart;then
        sfs_part=$(ls /dev/disk/by-label/sfsroot_* 2> /dev/null)
        if [ -n "$sfs_part" ];then
            label=$(basename $sfs_part)
            label_suffix=${label/sfsroot}
            aufs_part="/dev/disk/by-label/aufs$label_suffix"
            home_part="/dev/disk/by-label/home$label_suffix"
            work_part="/dev/disk/by-label/work$label_suffix"
            backup_part="/dev/disk/by-label/backup$label_suffix"
        fi
    fi

    if ! wait_sfspart 1;then
        test -b "$sfs_part" || sfs_part="/dev/disk/by-label/sfsroot$label_suffix"
        test -b "$aufs_part" || aufs_part="/dev/disk/by-label/aufs$label_suffix"
        test -b "$home_part" || home_part="/dev/disk/by-label/home$label_suffix"
        test -b "$work_part" || work_part="/dev/disk/by-label/work$label_suffix"
        test -b "$backup_part" || backup_part="/dev/disk/by-label/backup$label_suffix"
    fi

    if ! wait_sfspart 1;then
        err_exit "no sfs partiton"
    fi

    mkdir -p $sfs_part_mpath
    msg "Mounting $sfs_part on $sfs_part_mpath ..." > /dev/console
    mount_partition $sfs_part $sfs_part_mpath
    mount | grep $sfs_part_mpath || err_exit "mount $sfs_part"

    mkdir -p $sfs_ram_mpath

    root_file=$sfs_part_mpath/${root_sfs}
    home_file=$sfs_part_mpath/${home_sfs}
    aufs_root_file=$sfs_part_mpath/rootaufs.${aufs_file_suffix}
    aufs_home_file=$sfs_part_mpath/homeaufs.${aufs_file_suffix}

    test -e "$root_file" || err_exit "not found root sfs file!"

    if $sfs_in_mem;then
        root_fileSizeMB=`get_fileSizeMB $root_file`

        ramsfsSizeMB=$root_fileSizeMB
        if [ -e "$home_file" ];then
            home_fileSizeMB=`get_fileSizeMB $home_file`
            ramsfsSizeMB=`expr $ramsfsSizeMB + $home_fileSizeMB`
        fi
        ramsfsSizeMB=`expr $ramsfsSizeMB + 2`

        res_mem_size=`getFree_mem_sizeMB`
        res_mem_size=`expr $res_mem_size / 2`

        if [ $res_mem_size -gt $ramsfsSizeMB ];then
            #mount -t tmpfs -o mode=755,size=${ramsfsSizeMB}m tmpfs $sfs_ram_mpath
            mount -t tmpfs -o mode=755 tmpfs $sfs_ram_mpath

            rsync -rhP $root_file $sfs_ram_mpath > /dev/console
            root_file=$sfs_ram_mpath/$(basename $root_sfs)

            if [ -e "$home_file" ];then
                rsync -rhP $home_file $sfs_ram_mpath > /dev/console
                home_file=$sfs_ram_mpath/$(basename $home_sfs)
            fi
        else
            sfs_in_mem=false
        fi
    fi

    if [ $(getFree_mem_sizeMB) -lt 4096 -a ! -b "$aufs_part" ];then
        aufs_part=$sfs_part
    fi

    if [ -b "$aufs_part" ];then
        mkdir -p $aufs_mpath
        mount_partition $aufs_part $aufs_mpath
        if [ -e "${aufs_root_mpath}/$aufs_clean_file_name" ];then
            rm -rf $aufs_root_mpath
        fi
        if [ -e "${aufs_home_mpath}/$aufs_clean_file_name" ];then
            rm -rf $aufs_home_mpath
        fi
    fi
}

mount_root()
{
    if [ -e "$root_file" ];then
        mkdir -p -m 0755 $aufs_root_mpath
        if [ ! -b "$aufs_part" ];then
            if [ -z $root_mem_size ];then
                mount -t tmpfs -o mode=755 none $aufs_root_mpath
            else
                mount -t tmpfs -o mode=755,size=$root_mem_size none $aufs_root_mpath
            fi
        fi
        if [ -e "$aufs_root_file" ];then
            decompress_file $aufs_root_file $aufs_root_mpath
        fi
        mount -t aufs -o br:$aufs_root_mpath none $root_path/$root_mpath
        mkdir -p $sfs_root_mpath
        mount $root_file $sfs_root_mpath
        mount -t aufs -o remount,udba=none,append:${sfs_root_mpath}=ro none $root_path/$root_mpath
        for branch in $(seq 1 $aufs_max_branch)
        do
            if [ -e "${root_file}.${branch}" ];then
                mkdir -p ${sfs_root_mpath}.${branch}
                mount ${root_file}.${branch} ${sfs_root_mpath}.${branch}
                mount -t aufs -o remount,udba=none,add:1:${sfs_root_mpath}.${branch}=ro+wh none $root_path/$root_mpath
                continue
            fi
            break
        done
        if $aufs_show;then
            mkdir -p $root_path/$aufs_root_mpath
            mount -n --move $aufs_root_mpath $root_path/$aufs_root_mpath
        fi
        if $sfs_show;then
            mkdir -p $root_path/$sfs_root_mpath
            mount -n --move $sfs_root_mpath $root_path/$sfs_root_mpath
            for branch in $(seq 1 $aufs_max_branch)
            do
                if [ -e "${root_file}.${branch}" ];then
                    mkdir -p $root_path/${sfs_root_mpath}.${branch}
                    mount -n --move ${sfs_root_mpath}.${branch} $root_path/${sfs_root_mpath}.${branch}
                    continue
                fi
                break
            done
        fi
    fi

}

mount_home()
{
    mkdir -p $root_path/$home_mpath
    if [ -e "$home_file" ];then
        mkdir -p -m 0755 $aufs_home_mpath
        if [ ! -b "$aufs_part" ];then
            if [ -z $home_mem_size ];then
                mount -t tmpfs -o mode=755 none $aufs_home_mpath
            else
                mount -t tmpfs -o mode=755,size=$home_mem_size none $aufs_home_mpath
            fi
        fi
        if [ -e "$aufs_home_file" ];then
            decompress_file $aufs_home_file $aufs_home_mpath
        fi
        mount -t aufs -o br:$aufs_home_mpath none $root_path/$home_mpath
        mkdir -p $sfs_home_mpath
        mount $home_file $sfs_home_mpath
        mount -t aufs -o remount,udba=none,append:${sfs_home_mpath}=ro none $root_path/$home_mpath
        for branch in $(seq 1 $aufs_max_branch)
        do
            if [ -e "${home_file}.${branch}" ];then
                mkdir -p ${sfs_home_mpath}.${branch}
                mount ${home_file}.${branch} ${sfs_home_mpath}.${branch}
                mount -t aufs -o remount,udba=none,add:1:${sfs_home_mpath}.${branch}=ro+wh none $root_path/$home_mpath
                continue
            fi
            break
        done
        if $aufs_show;then
            mkdir -p $root_path/$aufs_home_mpath
            mount -n --move $aufs_home_mpath $root_path/$aufs_home_mpath
        fi
        if $sfs_show;then
            mkdir -p $root_path/$sfs_home_mpath
            mount -n --move $sfs_home_mpath $root_path/$sfs_home_mpath
            for branch in $(seq 1 $aufs_max_branch)
            do
                if [ -e "${home_file}.${branch}" ];then
                    mkdir -p $root_path/${sfs_home_mpath}.${branch}
                    mount -n --move ${sfs_home_mpath}.${branch} $root_path/${sfs_home_mpath}.${branch}
                    continue
                fi
                break
            done
        fi
    else
        mount_partition $home_part $root_path/$home_mpath
    fi
}

mount_work()
{
    mount_partition $work_part $root_path/$work_mpath
}

mount_backup()
{
    mount_partition $backup_part $root_path/$backup_mpath
}

mount_swap()
{
    if [ -b /dev/disk/by-label/swap$label_suffix ];then
        swapon LABEL=swap$label_suffix
    else
        all_mem_size=$(free -g | grep Mem | awk '{print $2}')
        if [ "$all_mem_size" -lt 8 ];then
            temp_size=$(expr $swap_size + 512)
            swap_path=$(get_freesize_path "$temp_size" /root/$sfs_part_mpath /root/$work_mpath /root/$backup_mpath)
            if [ -n "$swap_path" ];then
                if [ -e $swap_path/swap.img ];then
                    temp_size=$(get_filesize_mb $$swap_path/swap.img)
                    temp_size=$(expr $temp_size + 512)
                    if [ "$temp_size" -lt "$swap_size" ];then 
                        dd if=/dev/zero of=$swap_path/swap.img bs=1M count=0 seek=$swap_size
                    fi
                else
                    dd if=/dev/zero of=$swap_path/swap.img bs=1M count=0 seek=$swap_size
                fi
                chmod 600 $swap_path/swap.img
                mkswap $swap_path/swap.img
                swapon $swap_path/swap.img
            fi
        fi
    fi
}

move_sfs()
{
    if $sfs_in_mem;then
        mkdir -p $root_path/$sfs_ram_mpath
        mount -n --move $sfs_ram_mpath $root_path/$sfs_ram_mpath
        umount $sfs_part_mpath
    else
        mkdir -p $root_path/$sfs_part_mpath
        mount -n --move $sfs_part_mpath $root_path/$sfs_part_mpath
    fi

    if [ -b "$aufs_part" ];then
        mkdir -p $root_path/$aufs_mpath
        mount -n --move $aufs_mpath $root_path/$aufs_mpath
    fi
}

run_hook()
{
    umask 0077
    modprobe aufs

    init_params
    init_sfs
    mount_root
    mount_home
    mount_work
    mount_backup
    mount_swap
    move_sfs
    umask 0022

    mount_handler='true'

    if $zm_debug;then
        print_param_info
        read choice
        if [ "$choice" != "y" ];then
            launch_interactive_shell
        fi
    fi
}
